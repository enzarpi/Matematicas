---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid

    ```{r}
    # Instalamos y cargamos librerías
    if (!requireNamespace("tidyverse", quietly = TRUE)) {
      install.packages("tidyverse")
    }
    if (!requireNamespace("ggplot2", quietly = TRUE)) {
      install.packages("ggplot2")
    }
    if (!requireNamespace("rsample", quietly = TRUE)) {
      install.packages("rsample")
    }

    library(tidyverse)
    library(dplyr)
    library(dendextend)
    library(stats)
    library(ggplot2)
    library(rsample)
    ```

    ```{r}
    # Leemos el dataset
    airbnb <- read.csv('airbnb-listings.csv', sep = ';')

    # Vamos a quedarnos con las columnas de mayor interés
    df_madrid <- airbnb |>
      select(City, Room.Type, Neighbourhood, Accommodates, Bathrooms, Bedrooms, Beds, Price, Square.Feet, Guests.Included, Extra.People, Review.Scores.Rating, Latitude, Longitude) |>
      filter(City == "Madrid", Room.Type == "Entire home/apt", Neighbourhood != '') |>
      select(-City, -Room.Type)

    head(df_madrid)
    ```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

    ```{r}
    # Creamos una nueva columna Square.Meters a partir de Square.Feet
    df_madrid <- df_madrid |>
      mutate(Square.Meters = Square.Feet * 0.092903)

    head(df_madrid)
    ```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

    ```{r}
    # Calculamos el porcentaje de los apartamentos no muestran los metros cuadrados
    percentage_na <- mean(is.na(df_madrid$Square.Meters)) * 100

    # Mostrar el resultado
    cat("Porcentaje de apartamentos con NA en Square.Meters:", percentage_na, "%\n")
    ```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

    ```{r}
    # Filtrar los apartamentos con metros cuadrados diferentes de NA y calcular el porcentaje de los que tienen 0 metros cuadrados
    percentage_zero_m2 <- mean(df_madrid$Square.Meters[!is.na(df_madrid$Square.Meters)] == 0) * 100

    # Mostrar el resultado
    cat("El porcentaje de apartamentos que tienen 0 metros cuadrados es:", percentage_zero_m2, "%\n")
    ```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

    ```{r}
    # Reemplazamos todos los valores de 0 metros cuadrados por NA
    df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA

    # Ver las primeras filas del dataframe actualizado para verificar los cambios
    head(df_madrid)
    ```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

    ```{r}
    # Pintamos el histograma de los metros cuadrados
    ggplot(df_madrid, aes(x = Square.Meters)) +
      geom_histogram(binwidth = 5, fill = "blue", color = "black") +
      labs(title = "Histograma de Metros Cuadrados", x = "Metros Cuadrados", y = "Observaciones")
    ```

    ```{r}
    # Filtramos valores atípicos basados en los rangos identificados
    df_madrid_filtered <- df_madrid %>%
      filter(Square.Meters > 20 & Square.Meters < 500)

    # Pintamos el histograma nuevamente para verificar el filtrado
    ggplot(df_madrid_filtered, aes(x = Square.Meters)) +
      geom_histogram(binwidth = 5, fill = "blue", color = "black") +
      labs(title = "Histograma de Metros Cuadrados (Filtrado)", x = "Metros Cuadrados", y = "Observaciones")
    ```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

    ```{r}
    # Asignamos NA a los apartamentos que tengan menos de 20 m^2 en la columna Square.Meters
    df_madrid <- df_madrid |> 
      mutate(Square.Meters = ifelse(Square.Meters < 20, NA, Square.Meters))

    # Verificar los cambios
    summary(df_madrid$Square.Meters)
    ```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    # Eliminamos todos los pisos que pertenecen a estos barrios con 'dplyr'
    df_madrid <- df_madrid %>%
      group_by(Neighbourhood) %>%
      filter(!all(is.na(Square.Meters))) %>%
      ungroup()

    head(df_madrid)
    ```

    ------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    ```{r}
    # Realizamos Test de ANOVA 
    anova_result <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)

    summary(anova_result)
    ```

    ------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

    ```{r}
    # Realizamos la Prueba de Tukey
    tky<-TukeyHSD(aov(Square.Meters ~ Neighbourhood, data = df_madrid))
    tky.result <- data.frame(tky$Neighbourhood)

    # Creamos una matriz de p-valores
    cn <- sort(unique(df_madrid$Neighbourhood))
    resm <- matrix(NA, length(cn), length(cn))
    rownames(resm) <- cn
    colnames(resm) <- cn
    resm[lower.tri(resm)] <- round(tky.result$p.adj, 4)
    resm[upper.tri(resm)] <- t(resm)[upper.tri(resm)]
    diag(resm) <- 1
    ```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}

# dibujamos un dendrograma de los diferentes barrios.
dist_matrix <- as.dist(1 - resm)

dend_tree <- hclust(dist_matrix, method = "complete")
dend_obj <- as.dendrogram(dend_tree)

plot(dend_obj, main = "Dendrograma de Barrios", xlab = "Barrios", ylab = "Distancia")
```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

    ```{r}

    # Buscamos punto de corte aconsejable
    determine_clusters <- function(cut_height) {
      clusters <- cutree(dend_tree, h = cut_height)
      num_clusters <- length(unique(clusters))
      cat("Altura de corte:", cut_height, "Número de clusters:", num_clusters, "\n")
      return(num_clusters)
    }

    # Probar diferentes alturas de corte
    heights <- seq(0.1, 1.0, by = 0.1)
    cluster_counts <- sapply(heights, determine_clusters)

    # Graficamos el número de clusters
    plot(heights, cluster_counts, type = "b", pch = 19, frame = FALSE,
         xlab = "Altura de corte", ylab = "Número de clusters",
         main = "Número de clusters en función de la altura de corte")
    abline(v = 0.4, col = "red", lty = 2) 
    ```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

    ```{r}
    # Determinar los clusters finales usando el punto de corte seleccionado
    cut_height <- 0.4
    clusters <- cutree(dend_tree, h = cut_height)
    num_clusters <- length(unique(clusters))
    cat("Número de clusters:", num_clusters, "\n")

    # Crear un data frame con los clústeres
    df_cluster <- data.frame(Neighbourhood = names(clusters), neighb_id = clusters)
    head(df_cluster)

    df_madrid <- df_madrid |> left_join(df_cluster, by = 'Neighbourhood')

    # Verificar los cambios
    head(df_madrid)
    ```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

    ```{r}
    # Eliminamos las columnas Neighbourhood, Latitude y Longitude
    df_madrid <- df_madrid %>% select(-Neighbourhood, -Latitude, -Longitude)

    # Dividimos los datos en entrenamiento (80%) y prueba (20%)
    set.seed(123)
    split <- initial_split(df_madrid, prop = 0.80)

    train_data <- training(split)
    test_data <- testing(split)

    cat("Tamaño del conjunto de entrenamiento:", nrow(train_data), "\n")
    cat("Tamaño del conjunto de prueba:", nrow(test_data), "\n")
    ```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

    ```{r}
    # Entrenamos el modelo de regresión lineal solo con Accommodates, Bathrooms, Bedrooms, beds y Price
    model <- lm(Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Beds + Price + neighb_id, data = df_madrid)

    summary(model)

    # Predecimos los metros cuadrados en el conjunto de prueba
    predictions <- predict(model, newdata = test_data)

    # Comparamos las predicciones con los valores reales
    results <- data.frame(Actual = test_data$Square.Meters, Predicted = predictions)
    head(results)

    # Calculamos el error cuadrático medio (MSE)
    mse <- mean((results$Actual - results$Predicted)^2)
    cat("Error cuadrático medio (MSE):", mse, "\n")
    ```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

    ```{r}
    # Predecimos los metros cuadrados en el conjunto de prueba
    predictions <- predict(model, newdata = test_data)

    # Comparamos las predicciones con los valores reales
    results <- data.frame(Actual = test_data$Square.Meters, Predicted = predictions)

    head(results)

    # Calcular el Error Cuadrático Medio (MSE)
    mse <- mean((results$Actual - results$Predicted)^2, na.rm = TRUE)
    cat("Error Cuadrático Medio (MSE):", mse, "\n")

    # Calcular el Error Absoluto Medio (MAE)
    mae <- mean(abs(results$Actual - results$Predicted), na.rm = TRUE)
    cat("Error Absoluto Medio (MAE):", mae, "\n")

    # Calcular el Coeficiente de Determinación (R²)
    rss <- sum((results$Predicted - results$Actual)^2, na.rm = TRUE)
    tss <- sum((results$Actual - mean(results$Actual, na.rm = TRUE))^2, na.rm = TRUE)
    r_squared <- 1 - (rss / tss)
    cat("Coeficiente de Determinación (R²):", r_squared, "\n")

    ```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

    ```{r}

    neighb_id_sol <- 1

    # Creamos un dataframe con las características del apartamento
    new_apartment <- data.frame(
      Accommodates = 6,
      Bathrooms = 1,
      Price = 80,
      Bedrooms = 3,
      Beds = 3,
      neighb_id = neighb_id_sol
    )

    # Predecimos los metros cuadrados del apartamento
    predicted_size <- predict(model, new_apartment)
    cat("Predicción de metros cuadrados para el apartamento:", predicted_size, "\n")
    ```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

    ```{r}
    # Filtramos los datos con Square.Meters en NA
    na_data <- df_madrid %>% filter(is.na(Square.Meters))

    # Predecimos los valores faltantes
    na_data$Square.Meters <- predict(model, na_data)

    # Rellenamos los valores faltantes en el dataframe original
    df_madrid <- df_madrid %>%
      mutate(Square.Meters = ifelse(is.na(Square.Meters), 
                                    na_data$Square.Meters[match(rownames(df_madrid), rownames(na_data))], 
                                    Square.Meters))

    head(df_madrid)
    ```

------------------------------------------------------------------------
